--- /tmp/hrmgsZ_NSObject+WO.m	2015-10-28 04:53:21.698260035 +0800
+++ sope-appserver/NGObjWeb/NSObject+WO.m	2015-10-26 14:47:13.412711853 +0800
@@ -255,7 +255,7 @@
   if (object == nil) return NULL;
   if (_key   == nil) return NULL;
 
-#if GNU_RUNTIME && !(defined(__GNU_LIBOBJC__) && (__GNU_LIBOBJC__ >= 20100911))
+#if (defined(__GNU_LIBOBJC__) && (__GNU_LIBOBJC__ < 20100911))
   {
     unsigned keyLen;
     char     *buf;
@@ -309,7 +309,7 @@
       return nil;
     free(buf); buf = NULL;
   }
-#if GNUSTEP_BASE_LIBRARY
+#if GNUSTEP_BASE_LIBRARY && !defined(__GNUSTEP_RUNTIME__)
   if (!__objc_responds_to(object, getSel))
     return nil;
 #endif
--- /tmp/DymheY_SoSecurityException.h	2015-10-28 04:53:21.719256844 +0800
+++ sope-appserver/NGObjWeb/SoObjects/SoSecurityException.h	2015-10-28 02:35:51.300240204 +0800
@@ -35,8 +35,9 @@
 
 + (id)securityExceptionOnObject:(id)_object
   withAuthenticator:(id)_auth
-  andManager:(id)_manager;
-- (id)initWithObject:(id)_object authenticator:(id)_auth manager:(id)_manager;
+  andManager:(id)_manager
+  reason:(NSString *)_r;
+- (id)initWithObject:(id)_object authenticator:(id)_auth manager:(id)_manager reason:(NSString *)_reason;
 
 - (SoSecurityManager *)securityManager;
 - (id)authenticator;
--- /tmp/rOLge0_SoSecurityException.m	2015-10-28 04:53:21.740257285 +0800
+++ sope-appserver/NGObjWeb/SoObjects/SoSecurityException.m	2015-10-28 02:36:53.759821511 +0800
@@ -28,17 +28,19 @@
 + (id)securityExceptionOnObject:(id)_o 
   withAuthenticator:(id)_a 
   andManager:(id)_m 
+  reason:(NSString *)_r
 {
   return [[[self alloc] 
-	    initWithObject:_o authenticator:_a manager:_m] autorelease];
+	    initWithObject:_o authenticator:_a manager:_m reason:_r] autorelease];
 }
-- (id)initWithObject:(id)_object authenticator:(id)_auth manager:(id)_manager {
+- (id)initWithObject:(id)_object authenticator:(id)_auth manager:(id)_manager reason:(NSString *)_reason {
   NSString *n, *r;
   
   if ((n = [self name]) == nil)
     n = NSStringFromClass([self class]);
-  if ((r = [self reason]) == nil)
-    r = @"generic security exception";
+  if ((r = _reason) == nil)
+    if ((r = [self reason]) == nil)
+      r = @"generic security exception";
   
   if ((self = [super initWithName:n reason:r userInfo:nil])) {
     self->object          = [_object  retain];
--- /tmp/BlyYf4_SoSecurityManager.m	2015-10-28 04:53:21.762258146 +0800
+++ sope-appserver/NGObjWeb/SoObjects/SoSecurityManager.m	2015-10-28 02:38:03.445819624 +0800
@@ -74,11 +74,16 @@
 
 - (NSException *)makeExceptionForObject:(id)_obj reason:(NSString *)_r {
   NSException *e;
+  NSString *r;
   if (_obj == nil) return nil;
+  if ([_r length] <= 0)
+    r = nil;
+  else
+    r = _r;
   e = [SoAccessDeniedException securityExceptionOnObject:_obj
 			       withAuthenticator:nil
-			       andManager:self];
-  if ([_r length] > 0) [e setReason:_r];
+			       andManager:self
+			       reason:_r];
   return e;
 }
 
@@ -264,7 +269,8 @@
 				    withAuthenticator:
 				      [self authenticatorInContext:_ctx 
 					    object:_object]
-				    andManager:self];
+				    andManager:self
+				    reason:nil];
   }
   
   [self debugWithFormat:@"  got user: %@)", user];
@@ -319,7 +325,8 @@
                                       withAuthenticator:
                                         [self authenticatorInContext:_ctx
                                               object:_object]
-                                      andManager:self];
+                                      andManager:self
+                                      reason:nil];
     }
     else {
       /* 
--- /tmp/RX9TH2_common.h	2015-10-28 04:53:21.783257469 +0800
+++ sope-appserver/NGObjWeb/SoObjects/common.h	2015-10-28 04:15:45.627500625 +0800
@@ -23,6 +23,5 @@
 #include <NGExtensions/NGExtensions.h>
 
 @interface NSException(SoObjects_setUserInfo)
-- (id)setReason:(NSString *)_reason;
 - (id)setUserInfo:(NSDictionary *)_userInfo;
 @end
--- /tmp/TOS7J4_WOHTMLParser.m	2015-10-28 04:53:21.804267688 +0800
+++ sope-appserver/NGObjWeb/Templates/WOHTMLParser.m	2015-10-28 02:28:50.117856652 +0800
@@ -86,9 +86,9 @@
 
 /* callbacks */
 
-- (NSException *)_makeSyntaxErrorException {
+- (NSException *)_makeSyntaxErrorException:(NSString *)_reason {
   return [NSException exceptionWithName:@"SyntaxError"
-                      reason:@"template syntax error"
+                      reason:_reason
                       userInfo:nil];
 }
 
@@ -221,7 +221,6 @@
     // error resulted from a previous error (exception already set)
     return _exception;
   
-  exception = [self _makeSyntaxErrorException];
 
   if (atEof)
     _text = [@"Unexpected end: " stringByAppendingString:[_text stringValue]];
@@ -229,8 +228,8 @@
     _text = [StrClass stringWithFormat:@"Syntax error in line %i: %@",
                       numLines, _text];
   }
-  
-  [exception setReason:_text];
+ 
+  exception = [self _makeSyntaxErrorException:_text];
 
   /* user info */
   {
--- /tmp/V35C87_common.h	2015-10-28 04:53:21.826257654 +0800
+++ sope-appserver/NGObjWeb/Templates/common.h	2015-10-28 04:15:38.748414375 +0800
@@ -33,6 +33,5 @@
           __PRETTY_FUNCTION__, __LINE__];
 
 @interface NSException(NGObjWeb_Templates_setUserInfo)
-- (id)setReason:(NSString *)_reason;
 - (id)setUserInfo:(NSDictionary *)_userInfo;
 @end
--- /tmp/1KcKN7_common.h	2015-10-28 04:53:21.847256698 +0800
+++ sope-appserver/NGObjWeb/common.h	2015-10-28 04:17:51.195622007 +0800
@@ -82,7 +82,6 @@
 #endif
 
 @interface NSException(setUserInfo)
-- (id)setReason:(NSString *)_reason;
 - (id)setUserInfo:(NSDictionary *)_userInfo;
 @end
 
--- /tmp/ZRCFx9_NGPropertyListParser.m	2015-10-28 04:53:21.868261609 +0800
+++ sope-core/NGExtensions/FdExt.subproj/NGPropertyListParser.m	2015-10-28 04:18:13.340404609 +0800
@@ -43,7 +43,6 @@
 
 @interface NSException(UsedPrivates) /* may break on Panther? */
 - (void)setUserInfo:(NSDictionary *)_ui;
-- (void)setReason:(NSString *)_reason;
 @end
 
 static NSString     *_parseString (NSZone *_zone, const unsigned char *_buffer,
--- /tmp/xD4fHc_NSException+misc.m	2015-10-28 04:53:21.890256883 +0800
+++ sope-core/NGExtensions/FdExt.subproj/NSException+misc.m	2015-10-28 03:09:42.334686020 +0800
@@ -90,28 +90,6 @@
 
 @end /* NSException(NGMiscellaneous) */
 
-#if COCOA_Foundation_LIBRARY || NeXT_Foundation_LIBRARY
-
-@implementation NSException (NGLibFoundationCompatibility)
-- (void)setReason:(NSString *)_reason {
-  [_reason retain];
-  [self->reason release];
-  self->reason = _reason;
-}
-@end
-
-#elif GNUSTEP_BASE_LIBRARY
-
-@implementation NSException (NGLibFoundationCompatibility)
-- (void)setReason:(NSString *)_reason {
-  [_reason retain];
-  [self->_e_reason release];
-  self->_e_reason = _reason;
-}
-@end
-
-#endif
-
 void __link_NGExtensions_NSExceptionMisc() {
   __link_NGExtensions_NSExceptionMisc();
 }
--- /tmp/jgAqyc_NGBundleManager.m	2015-10-28 04:53:21.911256765 +0800
+++ sope-core/NGExtensions/NGBundleManager.m	2015-10-27 00:31:46.442294845 +0800
@@ -1998,13 +1998,17 @@
 	   "<%s %p fullPath: %s infoDictionary: %p loaded=%s>",
 #if (defined(__GNU_LIBOBJC__) && (__GNU_LIBOBJC__ >= 20100911)) || defined(APPLE_RUNTIME) || defined(__GNUSTEP_RUNTIME__) 
 	   (char*)class_getName([self class]),
+	   self,
+	   [[self bundlePath] cString],
+	   [self infoDictionary], 
+	   [self isLoaded] ? "yes" : "no");
 #else
 	   (char*)object_get_class_name(self),
-#endif
 	   self,
 	   [[self bundlePath] cString],
 	   [self infoDictionary], 
-	   self->_codeLoaded ? "yes" : "no");
+	   self->codeLoaded ? "yes" : "no");
+#endif
   
   return [NSString stringWithCString:buffer];
 }
--- /tmp/bWpDLf_NSException+misc.h	2015-10-28 04:53:21.933256788 +0800
+++ sope-core/NGExtensions/NGExtensions/NSException+misc.h	2015-10-28 02:47:47.544775895 +0800
@@ -55,13 +55,6 @@
 @end
 
 
-#if COCOA_Foundation_LIBRARY || GNUSTEP_BASE_LIBRARY
-@interface NSException (NGLibFoundationCompatibility)
-- (void)setReason:(NSString *)_reason;
-@end
-#endif
-
-
 /*
   The following macros are for use of locks together with exception handling.
   A synchronized block is properly 'unlocked' even if an exception occures.
--- /tmp/jgcmMh_EOFault.h	2015-10-28 04:53:21.954257508 +0800
+++ sope-gdl1/GDLAccess/EOFault.h	2015-10-26 19:18:35.501593583 +0800
@@ -9,6 +9,13 @@
 
 @class EOFaultHandler;
 
+#ifndef __has_attribute
+#define __has_attribute(x) 0
+#endif
+
+#if __has_attribute(objc_root_class)
+__attribute__((objc_root_class))
+#endif
 @interface EOFault
 {
   Class          isa;
--- /tmp/vqQrhh_PostgreSQL72DataTypeMappingException.m	2015-10-28 04:53:21.976568469 +0800
+++ sope-gdl1/PostgreSQL/PostgreSQL72DataTypeMappingException.m	2015-10-27 23:15:39.122655040 +0800
@@ -29,13 +29,16 @@
 #if !LIB_FOUNDATION_LIBRARY
 @interface PostgreSQL72DataTypeMappingException(Privates)
 - (void)setName:(NSString *)_name;
-- (void)setReason:(NSString *)_reason;
 - (void)setUserInfo:(NSDictionary *)_ui;
 @end
 #endif
 
 @implementation PostgreSQL72DataTypeMappingException
 
+/*
+// Unused method: setReason method call is bad and has been removed 
+// from NSException_misc.m because it uses IVARS. Exception reasons should be immutable.
+
 - (id)initWithObject:(id)_obj
   forAttribute:(EOAttribute *)_attr
   andPostgreSQLType:(NSString *)_dt
@@ -64,6 +67,7 @@
                                     nil]];
   return self;
 }
+*/ // END unused method (initWithObject)
 
 @end /* PostgreSQL72DataTypeMappingException */
 
--- /tmp/rwcTok_PostgreSQL72Values.h	2015-10-28 04:53:21.998257554 +0800
+++ sope-gdl1/PostgreSQL/PostgreSQL72Values.h	2015-10-28 04:53:15.393257783 +0800
@@ -38,11 +38,13 @@
 
 @interface PostgreSQL72DataTypeMappingException : PostgreSQL72Exception
 
+/*
 - (id)initWithObject:(id)_obj
   forAttribute:(EOAttribute *)_attr
   andPostgreSQLType:(NSString *)_dt
   inChannel:(PostgreSQL72Channel *)_channel;
 
+*/
 @end
 
 @protocol PostgreSQL72Values
